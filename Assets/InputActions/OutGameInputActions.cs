//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/OutGameInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @OutGameInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @OutGameInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""OutGameInputActions"",
    ""maps"": [
        {
            ""name"": ""OutGame"",
            ""id"": ""c7259ea8-b85b-4c21-bbbd-25770bee2553"",
            ""actions"": [
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""75dba732-4f53-4288-bb9e-3f5205280a8d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftSlide"",
                    ""type"": ""Button"",
                    ""id"": ""a1c06bc4-176c-45d1-a8e4-18b350e54d72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightSlide"",
                    ""type"": ""Button"",
                    ""id"": ""e72c221c-84c3-4257-af7c-209b52697a29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""53259510-f1dc-464f-9180-3ee49d509120"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2823372-d0f2-4569-a574-1853b0d9d5f3"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9d0c0693-024d-479d-920f-8a57e4e66a49"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LeftSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d356200b-0b5f-4456-ba7b-0bcef2099223"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""LeftSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0bd7c679-8182-4c35-963b-45ac26af5491"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2c33988-3912-468f-97d5-bea92b8804cf"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""LeftSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b91cc82-159c-4ac2-9797-f8a50353b800"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""RightSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2c1e1e1-990f-4d98-8c98-0b14f48546e9"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""RightSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc080956-f2af-45aa-938d-ceac2785db40"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""060b5220-1b9a-453c-9c0b-fe6d39944260"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RightSlide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // OutGame
        m_OutGame = asset.FindActionMap("OutGame", throwIfNotFound: true);
        m_OutGame_Submit = m_OutGame.FindAction("Submit", throwIfNotFound: true);
        m_OutGame_LeftSlide = m_OutGame.FindAction("LeftSlide", throwIfNotFound: true);
        m_OutGame_RightSlide = m_OutGame.FindAction("RightSlide", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // OutGame
    private readonly InputActionMap m_OutGame;
    private List<IOutGameActions> m_OutGameActionsCallbackInterfaces = new List<IOutGameActions>();
    private readonly InputAction m_OutGame_Submit;
    private readonly InputAction m_OutGame_LeftSlide;
    private readonly InputAction m_OutGame_RightSlide;
    public struct OutGameActions
    {
        private @OutGameInputActions m_Wrapper;
        public OutGameActions(@OutGameInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Submit => m_Wrapper.m_OutGame_Submit;
        public InputAction @LeftSlide => m_Wrapper.m_OutGame_LeftSlide;
        public InputAction @RightSlide => m_Wrapper.m_OutGame_RightSlide;
        public InputActionMap Get() { return m_Wrapper.m_OutGame; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OutGameActions set) { return set.Get(); }
        public void AddCallbacks(IOutGameActions instance)
        {
            if (instance == null || m_Wrapper.m_OutGameActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OutGameActionsCallbackInterfaces.Add(instance);
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @LeftSlide.started += instance.OnLeftSlide;
            @LeftSlide.performed += instance.OnLeftSlide;
            @LeftSlide.canceled += instance.OnLeftSlide;
            @RightSlide.started += instance.OnRightSlide;
            @RightSlide.performed += instance.OnRightSlide;
            @RightSlide.canceled += instance.OnRightSlide;
        }

        private void UnregisterCallbacks(IOutGameActions instance)
        {
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @LeftSlide.started -= instance.OnLeftSlide;
            @LeftSlide.performed -= instance.OnLeftSlide;
            @LeftSlide.canceled -= instance.OnLeftSlide;
            @RightSlide.started -= instance.OnRightSlide;
            @RightSlide.performed -= instance.OnRightSlide;
            @RightSlide.canceled -= instance.OnRightSlide;
        }

        public void RemoveCallbacks(IOutGameActions instance)
        {
            if (m_Wrapper.m_OutGameActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOutGameActions instance)
        {
            foreach (var item in m_Wrapper.m_OutGameActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OutGameActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OutGameActions @OutGame => new OutGameActions(this);
    public interface IOutGameActions
    {
        void OnSubmit(InputAction.CallbackContext context);
        void OnLeftSlide(InputAction.CallbackContext context);
        void OnRightSlide(InputAction.CallbackContext context);
    }
}
